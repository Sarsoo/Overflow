name: ci

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.arch }}
    name: Build & Unit Test
    strategy:
      matrix:
        dotnet-version: [ '9.0.x' ]
        arch: ['ubuntu-latest']

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3.0.3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install WASM Workload
        run: dotnet workload install wasm-tools
      - name: Install Dependencies
        run: dotnet restore Overflow.sln
      - name: Build
        run: dotnet build --configuration Debug --no-restore Overflow.sln
      - name: Test
        run: dotnet test --no-restore --verbosity normal Overflow.sln

  build-Docker:

    runs-on: ubuntu-latest
    name: Build Container (amd64)
    needs: [build] # for ignoring bad builds
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Web Container
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            sarsoo/overflow:latest-amd64
            sarsoo/overflow:${{ github.ref_name }}-amd64
          file: Dockerfile

  build-Docker-Arm:

    runs-on: ubuntu-24.04-arm
    name: Build Container (arm64)
    needs: [build] # for ignoring bad builds
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Web Container
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            sarsoo/overflow:latest-arm64
            sarsoo/overflow:${{ github.ref_name }}-arm64
          file: Dockerfile

  packageManifest:
    runs-on: ubuntu-latest
    name: Container Manifest
    needs: [ build-Docker, build-Docker-Arm ] # for ignoring bad builds
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifest images
        uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
        with:
            inputs: sarsoo/overflow:latest
            images: sarsoo/overflow:latest-amd64,sarsoo/overflow:latest-arm64
            push: true

      - name: Create and push manifest images
        uses: Noelware/docker-manifest-action@master # or use a pinned version in the Releases tab
        with:
            inputs: sarsoo/overflow:${{ github.ref_name }}
            images: sarsoo/overflow:${{ github.ref_name }}-amd64,sarsoo/overflow:${{ github.ref_name }}-arm64
            push: true

  # deploy:

  #   runs-on: ubuntu-latest
  #   name: Deploy
  #   needs: [build-Docker] # for ignoring bad builds
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
  #   environment: 
  #     name: prod
  #     url: https://overflow.sarsoo.xyz
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Tailscale
  #       uses: tailscale/github-action@v2
  #       with:
  #         oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
  #         oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
  #         tags: tag:ci
  #         version: 1.80.3

  #     - name: Deploy
  #       run: ssh -o StrictHostKeyChecking=no ${{ secrets.TS_SSH }} -t "cd overflow/ && docker compose up -d --pull always"